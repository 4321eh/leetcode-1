//https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/

//调用了5的代码，


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        return maxProfit(2, prices);
    }
    int max_helper(vector<int>& prices) {
        int result = 0;
        for (int i = 1; i < prices.size(); ++i) {
            if (prices[i] > prices[i - 1]) 
                result += prices[i] - prices[i - 1];
        }
        return result;
    }
    int maxProfit(int k, vector<int>& prices) {
        // diff = prices[i] - prices[i - 1]
        // local[i] = max(global[i - 1] + max(diff, 0), local[i] + diff)
        // global[i] = max(global[i], local[i])
        if (prices.size() - 1 <= k) return max_helper(prices);
        vector<int> local(k + 1, 0);
        vector<int> global(k + 1, 0);
        for (int i = 1;  i < prices.size(); ++i) {
            int diff = prices[i] - prices[i - 1];
            for (int j = k; j > 0; --j) {
                local[j] = max(global[j - 1] + max(diff, 0), local[j] + diff);
                global[j] = max(local[j], global[j]);
            }
        }
        return global[k];
    }
};

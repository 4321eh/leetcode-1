//https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(vector<int>& inorder, int first, int last, vector<int>& postorder, int k) {
        if (first > last) return NULL;
        if (first == last) return new TreeNode(inorder[first]);
        int mid;
        for (int i = first; i <= last; ++i) {
            if (inorder[i] == postorder[k]) {
                mid = i;
                break;
            }
        }
        TreeNode* root = new TreeNode(inorder[mid]);
        root->left = helper(inorder, first, mid - 1, postorder, k - (last - mid + 1));
        root->right = helper(inorder, mid + 1, last, postorder, k - 1);//error
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return helper(inorder, 0, inorder.size() - 1, postorder, postorder.size() - 1);
    }
};

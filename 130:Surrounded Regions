//https://leetcode.com/problems/surrounded-regions/


//注意！！！！！
//凡是找周边的，一定是要有一个visit来防止重找而导至死循环！！！！
//



class Solution {
public:
    void changeOutSideTok(vector<vector<char>>& board) {
        if (board.size() < 1 || board[0].size() < 1) return;
        queue<pair<int, int> > q;
        int n = board.size();
        int m = board[0].size();
        for (int i = 0; i < n; ++i) {
            q.push(make_pair(i, 0));
            q.push(make_pair(i, m - 1));
        }
        for (int i = 0; i < m; ++i) {
            q.push(make_pair(0, i));
            q.push(make_pair(n - 1, i));
        }
        int xx[] = {1, -1, 0, 0};
        int yy[] = {0, 0, -1, 1};
        vector<vector<bool>> visit(n, vector<bool>(m, false));
        while (not q.empty()) {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            if (x < 0 || x >= n) continue;
            if (y < 0 || y >= m) continue;
            if ('X' == board[x][y]) continue;
            if (visit[x][y]) continue;
            visit[x][y] = true;
            board[x][y] = 'k';
            for (int i = 0; i < 4; ++i) 
                q.push(make_pair(x + xx[i], y + yy[i]));
        }
    }
    void solve(vector<vector<char>>& board) {
        changeOutSideTok(board);
        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board[i].size(); ++j) {
                if ('O' == board[i][j]) {
                    board[i][j] = 'X';
                    continue;
                }
                if ('k' == board[i][j]) {
                    board[i][j] = 'O';
                }
            }
        }
    }
};

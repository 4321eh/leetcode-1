//https://leetcode.com/problems/reverse-words-in-a-string/

void reverse(char *first, char *last) {
    char c;
    while (first < last) {
        c = *first;
        *first++ = *last;
        *last-- = c;
    }
}
void reverseWords(char *s) {
    if (NULL == s) return;
    char *beg = s;
    char *end = s;
    while ('\0' != *end && ' ' == *end) end++;
    while ('\0' != *end && ' ' != *end) *beg++ = *end++;
    while ('\0' != *end) {
        if (' ' == *end) {
            end++;
            continue;
        }
        *beg++ = ' ';
        while ('\0' != *end && ' ' != *end) *beg++ = *end++;
    }
    *beg = '\0';
    beg = end = s;
    while ('\0' != *beg) {
        if (' ' == *beg) {
            beg = ++end;
            continue;
        }
        if (' ' == *end || '\0' == *end) {
            reverse(beg, --end);
            beg = ++end;
            continue;
        }
        end++;
    }
    reverse(s, --end);
}


// 最重要的错：helper没有想到内存重叠的情况
//
//还有好多case没想到
// " a " -> "a"
// " a  b    " -> "b a"
// " a  b    c " -> "c b a"
class Solution {
public:
    void helper(string& s, int& first, int last, int len) {
        while (len--) {
            if (first < last) {
                char temp = s[first];
                s[first] = s[last];
                s[last] = temp;
            }
            first ++;
            last --;
        }
    }
    void reverseWords(string &s) {
        int pos = 0;
        int pre = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (' ' == s[i]) {
                if (i != pre) {
                    helper(s, pos, i - 1, i - pre);
                    s[pos++] = ' ';
                }
                pre = i + 1;
                continue;
            }
            if (s.length() == i + 1) {
                helper(s, pos, i, i - pre + 1);
            }
        }
        
        int first = 0;
        int last = pos - int(' ' == s[pos - 1]) - 1;
        s = s.substr(0, last + 1);
        helper(s, first, last, last - first + 1);
    }
};


class Solution {
public:
    void helper(string &s, int first, int last) {
        char c;
        while (first < last) {
            c = s[first];
            s[first++] = s[last];
            s[last--] = c;
        }
    }
    void reverseWords(string &s) {
        int pre = 0;
        int pos = 0;
        while (pos < s.length() && ' ' == s[pos]) pos++;
        while (pos < s.length() && ' ' != s[pos]) s[pre++] = s[pos++];
        while (pos < s.length()) {
            if (' ' == s[pos]) {
                pos++;
                continue;
            }
            s[pre++] = ' ';
            while (pos < s.length() && ' ' != s[pos]) s[pre++] = s[pos++];
        }
        s = s.substr(0, pre);
        pre = pos = 0;
        while (pre < s.length()) {
            if (' ' == s[pre]) {
                pre = ++pos;
                continue;
            }
            if (s.length() == pos || ' ' == s[pos]) {
                helper(s, pre, pos - 1);
                pre = pos;
                continue;
            }
            pos++;
        }
        helper(s, 0, pos - 1);
    }
};

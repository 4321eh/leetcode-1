//https://leetcode.com/problems/implement-trie-prefix-tree/



class TrieNode {
public:
    // Initialize your data structure here.
    char val;
    bool isEnd;
    vector<TrieNode *> child;
    TrieNode(char c):val(c), isEnd(false) {};
    TrieNode():isEnd(false) {};
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        TrieNode *p = root;
        for (int i = 0; i < word.length(); ++i) {
            bool flag = false;
            for (int j = 0; j < p->child.size(); ++j) {
                TrieNode *temp = p->child[j];
                if (temp->val == word[i]) {
                    p = temp;
                    temp->isEnd |= (word.length() - 1 == i);
                    flag = true;
                    break;
                }
            }
            if (flag) continue;
            TrieNode *temp = new TrieNode(word[i]);
            temp->isEnd = (word.length() - 1 == i);
            p->child.push_back(temp);
            p = temp;
        }
    }

    // Returns if the word is in the trie.
    bool search(string word) {
       return helper(root, word, 0, false);
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
       return helper(root, prefix, 0, true); 
    }

private:
    bool helper(TrieNode *p, string &word, int k, bool is_prefix) {
        if (word.length() == k) return is_prefix || p->isEnd;
        for (int i = 0; i < p->child.size(); ++i) {
            if (p->child[i]->val == word[k]) return helper(p->child[i], word, k + 1, is_prefix);
        }
        return false;
    }
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");

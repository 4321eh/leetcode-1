//https://leetcode.com/problems/binary-tree-preorder-traversal/


//


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result;
        //helper_rec(root, result);  
        //helper_non_rec2(root, result);  
        helper_non_rec2(result, root);  
        return result;
    }
    void helper_rec(TreeNode *root, vector<int>& result) {
        if (NULL == root) return;
        result.push_back(root->val);
        helper_rec(root->left, result);
        helper_rec(root->right, result);
    }
    void helper_non_rec2(vector<int>& result, TreeNode *root) {
        TreeNode *p = root;
        stack<TreeNode*> s;
        TreeNode *p1 = NULL;
        while (NULL != p || not s.empty()) {
            if (NULL != p)  {
                s.push(p);
                result.push_back(p->val);//写在这是先序
                p = p->left;
                continue;
            }
            p = s.top();
            //if (p->right != p1 || NULL == p->right)
            //result.push_back(p->val);写在这是中序
            if (p->right == p1 || NULL == p->right) {
                //result.push_back(p->val);写在这是后序
                p1 = p;
                p = NULL;
                s.pop();
                continue;
            }
            p = p->right;
            p1 = NULL;
        }
    }
    void helper_non_rec(TreeNode *root, vector<int>& result) {
        stack<TreeNode*> s;
        s.push(root);
        while (not s.empty()) {
            TreeNode *p = s.top();
            s.pop();
            if (NULL == p) continue;
            result.push_back(p->val);
            
            s.push(p->right);
            s.push(p->left);
        }
    }
};

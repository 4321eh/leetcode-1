//https://leetcode.com/problems/maximum-product-subarray/

//还真的大道至简

//我只想到了维护一个最大正值，一个最大负值

//用题目的想法，用了一个最大值，最小值来完事


class Solution {
public:
    int max(int a, int b) {return a > b? a:b;}
    int min(int a, int b) {return a > b? b:a;}
    int max(int a, int b, int c) {return max(max(a, b), c);}
    int min(int a, int b, int c) {return min(min(a, b), c);}
    int maxProduct(vector<int>& nums) {
        if (nums.size() < 1) return 0;
        int max_local = nums[0];
        int min_local = nums[0];
        int result = nums[0];
        for (int i = 1; i < nums.size(); ++i) {
            int temp_max = max_local;
            max_local = max(max_local * nums[i], min_local * nums[i], nums[i]);
            min_local = min(temp_max * nums[i], min_local * nums[i], nums[i]);
            result = max(max_local, result);
        }
        return result;
    }
    int maxProduct2(vector<int>& nums) {
        // 0 
        // 0 0
        // 2
        // -2
        // -1 0 -2
        // 1 2 3 0 8
        //
        if (nums.size() < 1) return 0;
        long long max_pos = 1;
        long long max_neg = 1;
        int result = nums[0];
        for (int i = 0; i < nums.size(); ++i) {
            result = max(result, nums[i]);
            if (0 == nums[i]) {
                max_pos = max_neg = 1;
                continue;
            }
            if (nums[i] > 0) {
                max_pos *= nums[i];
                max_neg *= nums[i];
                result = max(result, max_pos);
                continue;
            }
            int temp = max_pos * nums[i];
            max_pos = max_neg * nums[i];
            max_neg = temp;
            if (max_pos < 0) {
                max_pos = 1;
                continue;
            }
            result = max(result, max_pos);
        }
        return result;
    }
};

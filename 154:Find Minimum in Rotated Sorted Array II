
//https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/

class Solution {
public:
    int helper(vector<int>& nums, int first, int last) {
        while (first < last && nums[first] == nums[first + 1]) first += 1;
        while (first < last && nums[last] == nums[last - 1]) last -= 1;
        if (first == last) {
            if (first < nums.size()) return nums[first];
            return nums[last];
        }
        int mid = (first + last) / 2;
        int left = nums[first] == nums[mid] || first == mid? nums[first] : helper(nums, first, mid);
        mid += 1;
        int right = nums[mid] == nums[last] || mid == last? nums[mid] : helper(nums, mid, last);
        return min(left, right);
    }
    int findMin(vector<int>& nums) {
        if (nums.size() < 1) return 0;
        return helper(nums, 0, nums.size() - 1);
    }
};
